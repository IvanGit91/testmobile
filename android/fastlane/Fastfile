# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

# default_platform(:android)

# platform :android do
#   desc "Runs all the tests"
#   lane :test do
#     gradle(task: "test")
#   end

#   desc "Submit a new Beta Build to Crashlytics Beta"
#   lane :beta do
#     gradle(task: "clean assembleRelease")
#     crashlytics
  
#     # sh "your_script.sh"
#     # You can also use other beta testing services here
#   end

#   desc "Deploy a new version to the Google Play"
#   lane :deploy do
#     gradle(task: "clean assembleRelease")
#     upload_to_play_store
#   end
# end

default_platform(:android)

# Ex: fastlane beta flavor:demo
platform :android do
  desc "Submit a new Internal Draft Build to Play Store"
  lane :beta do |options|
    flavor = options[:flavor]
    gradle(task: 'clean')

    # Increment version
    increment_version_name(
      app_project_dir: '**/app',
      bump_type: 'patch',
      flavor: flavor
    )
    increment_version_code(app_project_dir: '**/app', flavor: flavor)

    gradle(
      # task: 'assemble',
      task: 'bundle',
      flavor: flavor,
      build_type: 'Release',     
      print_command: false
    )
    upload_to_play_store(
      track: 'internal',
      release_status: 'draft'
    )
  end
end




# TESTING
lane :show_version do
  # Default
  version = get_version_name(app_project_dir: '**/app')
  UI.message("Default: #{version}")
  version_code = get_version_code(app_project_dir: '**/app')
  UI.message("Default: #{version_code}")

  # Demo
  version_demo = get_version_name(
    app_project_dir: '**/app',
    flavor: 'demo'
  )
  UI.message("demo flavor: #{version_demo}")
  version_code_demo = get_version_code(
    app_project_dir: '**/app',
    flavor: 'demo'
  )
  UI.message("demo flavor: #{version_code_demo}")

  # Qa
  version_qa = get_version_name(
    app_project_dir: '**/app',
    flavor: 'qa'
  )
  UI.message("qa flavor: #{version_qa}")
  version_code_qa = get_version_code(
    app_project_dir: '**/app',
    flavor: 'qa'
  )
  UI.message("qa flavor: #{version_code_qa}")
end

#major minor patch build
lane :bumpup do
  # Default
  increment_version_name(app_project_dir: '**/app', bump_type: 'patch')
  increment_version_code(app_project_dir: '**/app')

  #Demo
  increment_version_name(
    app_project_dir: '**/app',
    bump_type: 'patch',
    flavor: 'demo'
  )
  increment_version_code(app_project_dir: '**/app', flavor: "demo")

  #Qa
  increment_version_name(
    app_project_dir: '**/app',
    bump_type: 'patch',
    flavor: 'qa'
  )
  increment_version_code(app_project_dir: '**/app', flavor: "qa")
end
# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

ENV["FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD"] = "rvxk-pjlg-ficz-fgab"
#ENV["SPACESHIP_CONNECT_API_IN_HOUSE"] = 'true

default_platform(:ios)

platform :ios do

  ADMITTED_BUMP = ["major", "minor", "patch"]
  PROJECT_BUNDLE = "it.sample.test"
  PROJECT_NAME = "test"
  PROJECT_EXT = "#{PROJECT_NAME}.xcodeproj"
  WORKSPACE_EXT = "#{PROJECT_NAME}.xcworkspace"
  

  # ------- BUILD WITH LOCAL FASTLANE ---------- #
  # Ex: fastlane localbeta update:patch
  desc "Incremente version, build app, push a new beta build to TestFlight, update branch"
  lane :localbeta do |options|
    to_update = options[:update]
    incrementvb(
      update: to_update
    )
    
    certificate_and_provisioning()

    build_and_deploy()

    commit_and_push()
  end


  # ------- BUILD WITH BITRISE ---------- #
  # Ex: fastlane risebeta update:patch
  desc "From bitrise, incremente version, build app, push a new beta build to TestFlight, update branch"
  lane :risebeta do |options|
    to_update = options[:update]
    incrementvb(
      update: to_update
    )
    
    code_signing()

    build_and_deploy()

    commit_and_push()
  end


  # Ex: fastlane incrementvb update:patch
  lane :incrementvb do |options|

    to_update = options[:update]

    if to_update == nil
      UI.user_error!("'update' parameter not present")
      # UI.important "Skipping build because a cached build is available!"
      # next # skip doing the rest of this lane
    end

    if !ADMITTED_BUMP.include?(to_update)
      UI.user_error!("'" + to_update + "' must be one of: 'minor', 'major', 'patch'")
    end


    if to_update == "major"
      index = 0
    elsif to_update == "minor"
      index = 1
    else # patch
      index = 2
    end

    cur_build = ios_get_build_number(
      xcodeproj: PROJECT_EXT
    )

    arr_build = cur_build.split(".")
    patch_build = arr_build[index].to_i + 1
    arr_build[index] = patch_build.to_s 
    new_version = arr_build.join(".")
    new_ios_build = ios_set_build_number(
      build_number: new_version,
      xcodeproj: PROJECT_EXT
    )
    UI.message("New ios build: #{new_ios_build}")

    new_ios_version = ios_set_version(
      version: new_version,
      xcodeproj: PROJECT_EXT
    )
    UI.message("New ios version: #{new_ios_version}")
    UI.message("Version '" + to_update + "' incremented")
  end


  lane :build_and_deploy do
    build_ios_app(workspace: WORKSPACE_EXT, scheme: PROJECT_NAME)
    UI.message("App builded")

    upload_to_testflight
    UI.message("Uploaded to testflight")
  end


  lane :commit_and_push do
    git_commit(path: "..", message: "Version Bump")
    UI.message("Commit done")

    push_to_git_remote(
      remote: "origin",
      local_branch: "master",
      remote_branch: "master"
    )
    UI.message("Branch updated")
  end


  lane :certificate_and_provisioning do
    get_certificates
    UI.message("Got certificates")

    get_provisioning_profile(app_identifier: PROJECT_BUNDLE)
    UI.message("Got provisioning profile")
  end

  lane :code_signing do
    update_code_signing_settings(
        use_automatic_signing: true,
        path: PROJECT_EXT
    )
    UI.message("Updated code signing")
  end



# ------------------ TESTING ---------------------- #

  desc "Push a new beta build to TestFlight"
  lane :beta do
    get_certificates
    get_provisioning_profile(app_identifier: PROJECT_BUNDLE)

    increment_build_number(xcodeproj: PROJECT_EXT)
    build_ios_app(workspace: WORKSPACE_EXT, scheme: PROJECT_NAME)
    upload_to_testflight
  end

  # Ex: fastlane testversion update:patch
  lane :testversion do |options|

    to_update = options[:update]

    if to_update == nil
      UI.user_error!("'update' parameter not present")
      # UI.important "Skipping build because a cached build is available!"
      # next # skip doing the rest of this lane
    end

    if !ADMITTED_BUMP.include?(to_update)
      UI.user_error!("'" + to_update + "' must be one of: 'minor', 'major', 'patch'")
    end


    if to_update == "major"
      index = 0
    elsif to_update == "minor"
      index = 1
    else # patch
      index = 2
    end

    cur_version = ios_get_version(
      xcodeproj: PROJECT_EXT # optional
    )

    arr_version = cur_version.split(".")
    patch_version = arr_version[index].to_i + 1
    arr_version[index] = patch_version.to_s 
    ios_set_version(
      version: arr_version.join("."),
      xcodeproj: PROJECT_EXT
    )

    cur_build = ios_get_build_number(
      xcodeproj: PROJECT_EXT
    )

    arr_build = cur_build.split(".")
    patch_build = arr_build[index].to_i + 1
    arr_build[index] = patch_build.to_s 
    ios_set_build_number(
      build_number: arr_build.join("."), # optional, if not specified, Build Number will be incremented
      xcodeproj: PROJECT_EXT
    )
  end
end